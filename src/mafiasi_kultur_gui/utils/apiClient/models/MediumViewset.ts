/* tslint:disable */
/* eslint-disable */
/**
 * Mafiasi Kulturgenie√üer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Proposal } from './Proposal';
import {
    ProposalFromJSON,
    ProposalFromJSONTyped,
    ProposalToJSON,
} from './Proposal';
import type { Viewing } from './Viewing';
import {
    ViewingFromJSON,
    ViewingFromJSONTyped,
    ViewingToJSON,
} from './Viewing';

/**
 *
 * @export
 * @interface MediumViewset
 */
export interface MediumViewset {
    /**
     *
     * @type {string}
     * @memberof MediumViewset
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof MediumViewset
     */
    ag: string;
    /**
     *
     * @type {string}
     * @memberof MediumViewset
     */
    name: string;
    /**
     *
     * @type {Proposal}
     * @memberof MediumViewset
     */
    proposal: Proposal;
    /**
     *
     * @type {Viewing}
     * @memberof MediumViewset
     */
    viewing: Viewing;
}

/**
 * Check if a given object implements the MediumViewset interface.
 */
export function instanceOfMediumViewset(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ag" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "proposal" in value;
    isInstance = isInstance && "viewing" in value;

    return isInstance;
}

export function MediumViewsetFromJSON(json: any): MediumViewset {
    return MediumViewsetFromJSONTyped(json, false);
}

export function MediumViewsetFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediumViewset {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'id': !exists(json, 'id') ? undefined : json['id'],
        'ag': json['ag'],
        'name': json['name'],
        'proposal': ProposalFromJSON(json['proposal']),
        'viewing': ViewingFromJSON(json['viewing']),
    };
}

export function MediumViewsetToJSON(value?: MediumViewset | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'id': value.id,
        'ag': value.ag,
        'name': value.name,
        'proposal': ProposalToJSON(value.proposal),
        'viewing': ViewingToJSON(value.viewing),
    };
}
